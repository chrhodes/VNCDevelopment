<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/// <summary>
/// Low level routines used by client and web applications
/// This file produces the NAMED Log.NAMED_METHOD calls that are defined in
/// Log.LoggingPriority
/// 
/// </summary>
namespace VNC
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Reflection;

    using Microsoft.Practices.EnterpriseLibrary.Logging;
    
    public partial class Log
    {
	<#
		string[] named_methods = {
        
        #region These came from EASE days

			"APPLICATION_START",
			"APPLICATION_END",
			"LOADEASE",

			"SQL_CALL",	
			
			"PAGE_LOAD",
			"FORM_LOAD",

			// "EVENT_HANDLER", - Use Architecture infra

			"STATUS",

			"REDIRECT_TRANSFER",

			"POLLING",

			"ERROR_TRACE",
			"ERROR_TRACE_LOW",

			"EASESYS_IO",
			"EASESYS_IO_MED",
			"EASESYS_IO_LOW",

			"UI_CONTROL",
			"UI_CONTROL_MED",
			"UI_CONTROL_LOW",

			"UTILITY",
			"UTILITY_MED",
			"UTILITY_LOW",

			"OPERATION",
			"OPERATION_LOW",

			"APPLICATION_SESSION",
			"APPLICATION_SESSION_LOW",

			"SYSTEM_CONFIG",
			"SYSTEM_CONFIG_LOW",

			"FILE_DIR_IO",
			"FILE_DIR_IO_LOW",

			"DATABASE_IO",
			"DATABASE_IO_LOW",

			"SECURITY",
			"SECURITY_LOW",

			"CLEAR_INITIALIZE",

        #endregion

        #region These are from Architecture visualization

            //"CONSTRUCTOR", // Special handling for CONSTRUCTOR - Infra

            "EVENT",
            "EVENT_HANDLER",
            "APPLICATION_INITIALIZE",
            "CORE",
            "MODULE",
            "MODULE_INITIALIZE",

            "APPLICATION",
            "APPLICATIONSERVICES",
            "DOMAIN",
            "DOMAINSERVICES",

            "PERSISTENCE",
            "PERSISTENCE_LOW",

            "INFRASTRUCTURE",

            "PRESENTATION",
            "VIEW",
            "VIEW_LOW",
            "VIEWMODEL",
            "VIEWMODEL_LOW",

            #endregion

            #region These are from Minsk

            "SYNTAX",
            "SYNTAX_LOW",
            "LEXER",
            "LEXER_LOW",
            "PARSER",
            "PARSER_LOW",
            "BINDER",
            "BINDER_LOW",
            "EVALUATOR",

            "TEXT",
            "TEXT_LOW",

            "COMPILER",
            "DIAGNOSTIC",

            "TEST",
            
            #endregion

			"DEFAULT"

			};

		foreach (string methodName in named_methods)
		{		
	#>
	#region <#= methodName #>

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, MethodBase method = null)
        {
            if (method == null) method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, false);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, Dictionary<string, string> props)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, false, props);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, int EventId)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), EventId);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, long startTicks, MethodBase method = null)
        {
            if (method == null) method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), startTicks);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, int EventId, Dictionary<string, string> props)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), EventId, props);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, int EventId, long startTicks)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), EventId, startTicks);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, long startTicks, Dictionary<string, string> props)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), startTicks, props);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long <#= methodName #>(string message, string applicationCategory, int EventId, long startTicks, Dictionary<string, string> props)
        {
            MethodBase method = new StackFrame(1).GetMethod();
            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.<#= methodName #>,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, Convert.ToBoolean(0), EventId, startTicks, props);
            return Stopwatch.GetTimestamp();
        }

        #endregion

	<#
		}
	#>
        // NOTE(crhodes)
        //
        // Special handling for LOG.CONSTRUCTOR
        //
        // This is for the case where Release Builds and Dependency Injection use lambdas.
        // Lambda's have a null ReflectedType.  The ReflectedType gets the name of the Type containing the method
        // Go up one level on the stack to see if we find a proper methods.
        //
        // N.B. For now, only support these two.  Later may decide to just put this in the general routines.

        [DebuggerStepThrough]
        public static long CONSTRUCTOR(string message, string applicationCategory, MethodBase method = null)
        {
            if (method == null) method = new StackFrame(1).GetMethod();

            if (method.ReflectedType is null)
            {
                method = new StackFrame(2).GetMethod();
                // Leave a mark we got fancy.
                message = $"{message}-lambda caller";
            }

            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.CONSTRUCTOR,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, false);
            return Stopwatch.GetTimestamp();
        }

        [DebuggerStepThrough]
        public static long CONSTRUCTOR(string message, string applicationCategory, long startTicks, MethodBase method = null)
        {
            if (method == null) method = new StackFrame(1).GetMethod();

            if (method.ReflectedType is null)
            {
                method = new StackFrame(2).GetMethod();
                // Leave a mark we got fancy.
                message = $"{message}-lambda caller";
            }

            InternalWrite(message, TraceEventType.Verbose, applicationCategory, LoggingPriority.CONSTRUCTOR,
                method.ReflectedType.Name, method.Name, Assembly.GetCallingAssembly().GetName().Name, false, startTicks);
            return Stopwatch.GetTimestamp();
        }
	}
}